let rbt = null, rbt2 = null; async function setup () { let frame = tensor_tool.frame, cframe = tensor_tool.cframe, cquat = tensor_tool.cquat, vec3 = tensor_tool.vec3, cfloat = tensor_tool.cfloat, canvas = document.querySelector("#glcanvas"); canvas.width = window.innerWidth, canvas.height = window.innerHeight; let info = init_ctrl(canvas, !0), gl = canvas.getContext("webgl"); if (!gl) return void alert("init WebGL err."); window.onresize = function () { canvas.width = window.innerWidth, canvas.height = window.innerHeight, gl.viewport(0, 0, canvas.width, canvas.height) }; let prog_in = await init_prog(gl, "shader/vs2.glsl", "shader/fs2.glsl", ["vertex", "normal"], ["mat_proj", "mat_view", "mat_mod"]); obs.init(info, gl, prog_in, 60); { let body = document.body; rbt = new robot_tool.robot_sys(body, new frame(new vec3(0, 0, 0), cquat.o)), rbt2 = new robot_tool.robot_sys(body, new frame(new vec3(0, 0, -2e3), cquat.o)), await rbt.r.init_kr20(obs), await rbt2.r.init_kr210(obs) } "WebSocket" in window ? (ws = new WebSocket("ws://127.0.0.1:8183"), console.log(ws), ws.onopen = function () { console.log("open"), ws.send("hello777777723432424") }, ws.onerror = function () { console.log("err") }, ws.onmessage = function (e) { console.log(e.data) }, ws.onclose = function (e) { console.log("close") }, ws.onerror = function (e) { console.log(e.error) }, console.log("ok")) : console.log("您的浏览器不支持WebSocket"); let obj = await obs.open_obj("model/0.obj"), then = 0; function render (now) { let deltaTime = (now *= .001) - then; then = now, loop(gl, obj, deltaTime), requestAnimationFrame(render) } requestAnimationFrame(render) } let ang = 0; function loop (gl, obj, dt) { gl.clearColor(.3, .3, .3, 1), gl.clearDepth(1), gl.enable(gl.DEPTH_TEST), gl.depthFunc(gl.LEQUAL), gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT), obs.update(); let frame = tensor_tool.frame, cframe = tensor_tool.cframe, cquat = tensor_tool.cquat, vec3 = tensor_tool.vec3, cfloat = tensor_tool.cfloat; obs.draw_obj(obj, cframe.o), ang += dt; let s = .5 * Math.sin(2 * ang); rbt.show(obs, [0, s - cfloat.pi_2, -s + cfloat.pi_2, 0, cfloat.pi_2, 0]), rbt2.show(obs, [0, -s - cfloat.pi_2, s + cfloat.pi_2, 0, cfloat.pi_2, 0]) } setup();